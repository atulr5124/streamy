{"ast":null,"code":"var _jsxFileName = \"/Users/atulrauthan/Projects/react/streams/streamy/client/src/components/streams/StreamShow.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport flv from 'flv.js';\nimport { fetchStream } from \"../../actions\";\n\nclass StreamShow extends React.Component {\n  constructor(props) {\n    super(props);\n    this.videoRef = React.createRef();\n  }\n\n  componentDidMount() {\n    const {\n      id\n    } = this.props.match.params;\n    this.props.fetchStream(id);\n    this.buildPlayer();\n  }\n\n  componentDidUpdate() {\n    this.buildPlayer();\n  }\n\n  componentWillMount() {\n    this.player.destroy();\n  }\n\n  buildPlayer() {\n    if (this.player || !this.props.stream) {\n      return;\n    }\n\n    const {\n      id\n    } = this.props.match.params;\n    this.player = flv.createPlayer({\n      type: 'flv',\n      url: `http://localhost:8000/live/${id}.flv`\n    });\n    this.player.attachMediaElement(this.videoRef.current);\n    this.player.load();\n  }\n\n  render() {\n    if (!this.props.stream) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 17\n        }\n      }, \"Loading...\");\n    }\n\n    const {\n      title,\n      description\n    } = this.props.stream;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"video\", {\n      ref: this.videoRef,\n      style: {\n        width: '100%'\n      },\n      controls: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }\n    }, title), /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }\n    }, description));\n  }\n\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    stream: state.streams[ownProps.match.params.id]\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchStream\n})(StreamShow);","map":{"version":3,"sources":["/Users/atulrauthan/Projects/react/streams/streamy/client/src/components/streams/StreamShow.js"],"names":["React","connect","flv","fetchStream","StreamShow","Component","constructor","props","videoRef","createRef","componentDidMount","id","match","params","buildPlayer","componentDidUpdate","componentWillMount","player","destroy","stream","createPlayer","type","url","attachMediaElement","current","load","render","title","description","width","mapStateToProps","state","ownProps","streams"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,GAAP,MAAgB,QAAhB;AACA,SAASC,WAAT,QAA4B,eAA5B;;AAEA,MAAMC,UAAN,SAAyBJ,KAAK,CAACK,SAA/B,CAAyC;AAErCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,QAAL,GAAgBR,KAAK,CAACS,SAAN,EAAhB;AACH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChB,UAAM;AAAEC,MAAAA;AAAF,QAAS,KAAKJ,KAAL,CAAWK,KAAX,CAAiBC,MAAhC;AACA,SAAKN,KAAL,CAAWJ,WAAX,CAAuBQ,EAAvB;AACA,SAAKG,WAAL;AACH;;AAEDC,EAAAA,kBAAkB,GAAG;AACjB,SAAKD,WAAL;AACH;;AAEDE,EAAAA,kBAAkB,GAAG;AACjB,SAAKC,MAAL,CAAYC,OAAZ;AACH;;AAEDJ,EAAAA,WAAW,GAAG;AACV,QAAG,KAAKG,MAAL,IAAe,CAAC,KAAKV,KAAL,CAAWY,MAA9B,EAAsC;AAClC;AACH;;AACD,UAAM;AAAER,MAAAA;AAAF,QAAS,KAAKJ,KAAL,CAAWK,KAAX,CAAiBC,MAAhC;AACA,SAAKI,MAAL,GAAcf,GAAG,CAACkB,YAAJ,CAAiB;AAC3BC,MAAAA,IAAI,EAAE,KADqB;AAE3BC,MAAAA,GAAG,EAAG,8BAA6BX,EAAG;AAFX,KAAjB,CAAd;AAIA,SAAKM,MAAL,CAAYM,kBAAZ,CAA+B,KAAKf,QAAL,CAAcgB,OAA7C;AACA,SAAKP,MAAL,CAAYQ,IAAZ;AACH;;AAEDC,EAAAA,MAAM,GAAG;AACL,QAAG,CAAC,KAAKnB,KAAL,CAAWY,MAAf,EAAuB;AACnB,0BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ;AAGH;;AACD,UAAM;AAAEQ,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAyB,KAAKrB,KAAL,CAAWY,MAA1C;AACA,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAO,MAAA,GAAG,EAAE,KAAKX,QAAjB;AAA2B,MAAA,KAAK,EAAE;AAACqB,QAAAA,KAAK,EAAE;AAAR,OAAlC;AAAmD,MAAA,QAAQ,MAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKF,KAAL,CAFJ,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKC,WAAL,CAHJ,CADJ;AAOH;;AAhDoC;;AAmDzC,MAAME,eAAe,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AACzC,SAAQ;AAAEb,IAAAA,MAAM,EAAEY,KAAK,CAACE,OAAN,CAAcD,QAAQ,CAACpB,KAAT,CAAeC,MAAf,CAAsBF,EAApC;AAAV,GAAR;AACH,CAFD;;AAIA,eAAeV,OAAO,CAClB6B,eADkB,EAElB;AAAE3B,EAAAA;AAAF,CAFkB,CAAP,CAGbC,UAHa,CAAf","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport flv from 'flv.js';\nimport { fetchStream } from \"../../actions\";\n\nclass StreamShow extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.videoRef = React.createRef();\n    }\n\n    componentDidMount() {\n        const { id } = this.props.match.params;\n        this.props.fetchStream(id);\n        this.buildPlayer();\n    }\n\n    componentDidUpdate() {\n        this.buildPlayer();\n    }\n\n    componentWillMount() {\n        this.player.destroy();\n    }\n\n    buildPlayer() {\n        if(this.player || !this.props.stream) {\n            return;\n        }\n        const { id } = this.props.match.params;\n        this.player = flv.createPlayer({\n            type: 'flv',\n            url: `http://localhost:8000/live/${id}.flv`\n        });\n        this.player.attachMediaElement(this.videoRef.current);\n        this.player.load();\n    }\n\n    render() {\n        if(!this.props.stream) {\n            return(\n                <div>Loading...</div> \n            );\n        }\n        const { title, description } = this.props.stream;\n        return (\n            <div>\n                <video ref={this.videoRef} style={{width: '100%'}} controls />\n                <h1>{title}</h1>\n                <h5>{description}</h5>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return ({ stream: state.streams[ownProps.match.params.id] });\n}\n\nexport default connect(\n    mapStateToProps,\n    { fetchStream }\n)(StreamShow);\n"]},"metadata":{},"sourceType":"module"}