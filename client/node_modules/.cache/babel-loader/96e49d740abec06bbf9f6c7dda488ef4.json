{"ast":null,"code":"var _jsxFileName = \"/Users/atulrauthan/Projects/react/streams/client/src/components/streams/StreamCreate.js\";\nimport React from 'react';\nimport { Field, reduxForm } from 'redux-form';\n\nclass StreamCreate extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderError = ({\n      error,\n      touched\n    }) => {\n      if (touched && error) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"ui error message\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 9,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"header\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 10,\n            columnNumber: 17\n          }\n        }, error));\n      }\n    };\n  }\n\n  renderInput({\n    input,\n    label,\n    meta\n  }) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"field\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 17\n      }\n    }, label), /*#__PURE__*/React.createElement(\"input\", Object.assign({}, input, {\n      autoComplete: \"off\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 17\n      }\n    })), this.renderError(meta));\n  }\n\n  onSubmit(formValues) {\n    console.log(formValues);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"form\", {\n      className: \"ui form\",\n      onSubmit: this.props.handleSubmit(this.onSubmit),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Field, {\n      name: \"title\",\n      component: this.renderInput,\n      label: \"Enter Title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Field, {\n      name: \"description\",\n      component: this.renderInput,\n      label: \"Enter Description\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"ui button primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }\n    }, \"Submit\"));\n  }\n\n}\n\nconst validate = formValues => {\n  const errors = {};\n\n  if (!formValues.title) {\n    errors.title = 'You must enter a title';\n  }\n\n  if (!formValues.description) {\n    errors.description = 'You must enter a description';\n  }\n\n  return errors;\n};\n\nexport default reduxForm({\n  form: 'streamCreate',\n  validate\n})(StreamCreate);","map":{"version":3,"sources":["/Users/atulrauthan/Projects/react/streams/client/src/components/streams/StreamCreate.js"],"names":["React","Field","reduxForm","StreamCreate","Component","renderError","error","touched","renderInput","input","label","meta","onSubmit","formValues","console","log","render","props","handleSubmit","validate","errors","title","description","form"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,SAAhB,QAAiC,YAAjC;;AAEA,MAAMC,YAAN,SAA2BH,KAAK,CAACI,SAAjC,CAA2C;AAAA;AAAA;;AAAA,SAE3CC,WAF2C,GAE7B,CAAC;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAAD,KAAwB;AAClC,UAAGA,OAAO,IAAID,KAAd,EAAqB;AACjB,4BACI;AAAK,UAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACI;AAAK,UAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACKA,KADL,CADJ,CADJ;AAOH;AACJ,KAZ0C;AAAA;;AAcvCE,EAAAA,WAAW,CAAC;AAAEC,IAAAA,KAAF;AAASC,IAAAA,KAAT;AAAgBC,IAAAA;AAAhB,GAAD,EAAyB;AAChC,wBACI;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAASD,KAAT,CADJ,eAEI,+CAAWD,KAAX;AAAkB,MAAA,YAAY,EAAC,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAFJ,EAGK,KAAKJ,WAAL,CAAiBM,IAAjB,CAHL,CADJ;AAOH;;AAEDC,EAAAA,QAAQ,CAACC,UAAD,EAAa;AACjBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,UAAZ;AACH;;AAEDG,EAAAA,MAAM,GAAG;AACL,wBACI;AACI,MAAA,SAAS,EAAC,SADd;AAEI,MAAA,QAAQ,EAAE,KAAKC,KAAL,CAAWC,YAAX,CAAwB,KAAKN,QAA7B,CAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAGI,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,OAAZ;AAAoB,MAAA,SAAS,EAAE,KAAKJ,WAApC;AAAiD,MAAA,KAAK,EAAC,aAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ,eAII,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,aAAZ;AAA0B,MAAA,SAAS,EAAE,KAAKA,WAA1C;AAAuD,MAAA,KAAK,EAAC,mBAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ,eAKI;AAAQ,MAAA,SAAS,EAAC,mBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBALJ,CADJ;AASH;;AAtCsC;;AAyC3C,MAAMW,QAAQ,GAAIN,UAAD,IAAgB;AAC7B,QAAMO,MAAM,GAAG,EAAf;;AACA,MAAG,CAACP,UAAU,CAACQ,KAAf,EAAsB;AAClBD,IAAAA,MAAM,CAACC,KAAP,GAAe,wBAAf;AACH;;AACD,MAAG,CAACR,UAAU,CAACS,WAAf,EAA4B;AACxBF,IAAAA,MAAM,CAACE,WAAP,GAAqB,8BAArB;AACH;;AACD,SAAOF,MAAP;AACH,CATD;;AAWA,eAAelB,SAAS,CAAC;AACrBqB,EAAAA,IAAI,EAAE,cADe;AAErBJ,EAAAA;AAFqB,CAAD,CAAT,CAGZhB,YAHY,CAAf","sourcesContent":["import React from 'react';\nimport { Field, reduxForm } from 'redux-form';\n\nclass StreamCreate extends React.Component {\n\nrenderError = ({ error, touched }) => {\n    if(touched && error) {\n        return (\n            <div className=\"ui error message\">\n                <div className=\"header\">\n                    {error}\n                </div>\n            </div>\n        );\n    }\n}\n\n    renderInput({ input, label, meta }) {\n        return(\n            <div className=\"field\">\n                <label>{ label }</label>\n                <input {...input} autoComplete=\"off\" />\n                {this.renderError(meta)}\n            </div>\n        );\n    }\n\n    onSubmit(formValues) {\n        console.log(formValues);\n    }\n\n    render() {\n        return(\n            <form \n                className=\"ui form\" \n                onSubmit={this.props.handleSubmit(this.onSubmit)}>\n                <Field name=\"title\" component={this.renderInput} label=\"Enter Title\" />\n                <Field name=\"description\" component={this.renderInput} label=\"Enter Description\" />\n                <button className=\"ui button primary\">Submit</button>\n            </form>\n        );\n    };\n}\n\nconst validate = (formValues) => {\n    const errors = {};\n    if(!formValues.title) {\n        errors.title = 'You must enter a title';\n    } \n    if(!formValues.description) {\n        errors.description = 'You must enter a description';\n    }\n    return errors;\n};\n\nexport default reduxForm({\n    form: 'streamCreate',\n    validate\n})(StreamCreate);   \n"]},"metadata":{},"sourceType":"module"}